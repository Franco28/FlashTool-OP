/*
 * Copyright 2019 Franco.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Tool En
 * 
 * @author (Franco Mato - franco28) 
 * @version (1.0.0.8.RC1)
 * 
 * 
 */

package oneplus;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.JFrame;
import java.io.File;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.ImageIcon;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static oneplus.size.getFileFolderSize;

public class OPENVisual extends javax.swing.JFrame {
       
    /**
     * Creates new form OPVisual
     */
    public OPENVisual() {
        initComponents();
    }
           
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UnlockBootloaderBTN = new javax.swing.JButton();
        LockBootloaderBTN = new javax.swing.JButton();
        FlashTWRPOfficialBTN = new javax.swing.JButton();
        FlashTWRPOxygenOSBTN = new javax.swing.JButton();
        BootloaderLabel = new javax.swing.JLabel();
        RecoveryLabel = new javax.swing.JLabel();
        RebootBootloaderBTN = new javax.swing.JButton();
        RebootRecoveryBTN = new javax.swing.JButton();
        DebugConsole = new javax.swing.JFormattedTextField();
        RebootLabel = new javax.swing.JLabel();
        ConsoleLabel = new javax.swing.JLabel();
        CheckADBDevicesBTN = new javax.swing.JButton();
        CheckFastbootDevicesBTN = new javax.swing.JButton();
        OPLogo = new javax.swing.JLabel();
        CheckLabel = new javax.swing.JLabel();
        TaskBar = new javax.swing.JMenuBar();
        MenuFiles = new javax.swing.JMenu();
        MenuItemOpenADB = new javax.swing.JMenuItem();
        MenuFilesSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuIMGFolders = new javax.swing.JMenu();
        MenuItemOpenIMGFolder = new javax.swing.JMenuItem();
        MenuItemEmptyIMGFolder = new javax.swing.JMenuItem();
        MenuFilesSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuSubDirs = new javax.swing.JMenu();
        MenuItemTWRP = new javax.swing.JMenuItem();
        MenuItemFirmware = new javax.swing.JMenuItem();
        MenuItemRecovery = new javax.swing.JMenuItem();
        MenuFlash = new javax.swing.JMenu();
        MenuItemFlashFirmware = new javax.swing.JMenuItem();
        MenuItemFlashFirmwareSeparator = new javax.swing.JPopupMenu.Separator();
        MenuItemDownloadFirmware = new javax.swing.JMenuItem();
        MenuOthers = new javax.swing.JMenu();
        MenuItemRebootTool = new javax.swing.JMenuItem();
        MenuOthersSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuLang = new javax.swing.JMenu();
        MenuItemSpanish = new javax.swing.JMenuItem();
        MenuOthersSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuTool = new javax.swing.JMenu();
        MenuItemOP5Tool = new javax.swing.JMenuItem();
        MenuItemXiaomi = new javax.swing.JMenuItem();
        MenuOthersSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuItemEndJavaProcess = new javax.swing.JMenuItem();
        MenuOthersSeparator4 = new javax.swing.JPopupMenu.Separator();
        MenuItemEndAllProcess = new javax.swing.JMenuItem();
        MenuOthersSeparator5 = new javax.swing.JPopupMenu.Separator();
        MenuItemUninstallTool = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenu();
        MenuItemChangelog = new javax.swing.JMenuItem();
        MenuHelpSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuItemCredits = new javax.swing.JMenuItem();
        MenuHelpSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuItemLisence = new javax.swing.JMenuItem();
        MenuHelpSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuCodeOthers = new javax.swing.JMenu();
        MenuItemPage = new javax.swing.JMenuItem();
        MenuItemReleases = new javax.swing.JMenuItem();
        MenuItemGit = new javax.swing.JMenuItem();
        MenuItemBugs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OnePlus Tool - BETA En - 1.0.0.8-RC1");
        setBackground(java.awt.Color.darkGray);
        setForeground(java.awt.Color.darkGray);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        UnlockBootloaderBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        UnlockBootloaderBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/unlocked.png"))); // NOI18N
        UnlockBootloaderBTN.setText("Unlock Bootloader");
        UnlockBootloaderBTN.setToolTipText("Unlock  bootloader, this will delete all your data");
        UnlockBootloaderBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UnlockBootloaderBTN.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        UnlockBootloaderBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnlockBootloaderBTNActionPerformed(evt);
            }
        });

        LockBootloaderBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        LockBootloaderBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/locked.png"))); // NOI18N
        LockBootloaderBTN.setText("Lock Bootloader");
        LockBootloaderBTN.setToolTipText("Lock  bootloader, this will delete all your data");
        LockBootloaderBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LockBootloaderBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LockBootloaderBTNActionPerformed(evt);
            }
        });

        FlashTWRPOfficialBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        FlashTWRPOfficialBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/flash.png"))); // NOI18N
        FlashTWRPOfficialBTN.setText("Flash TWRP Official");
        FlashTWRPOfficialBTN.setToolTipText("");
        FlashTWRPOfficialBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FlashTWRPOfficialBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlashTWRPOfficialBTNActionPerformed(evt);
            }
        });

        FlashTWRPOxygenOSBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        FlashTWRPOxygenOSBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/flash.png"))); // NOI18N
        FlashTWRPOxygenOSBTN.setText("Flash TWRP OxygenOS");
        FlashTWRPOxygenOSBTN.setToolTipText("");
        FlashTWRPOxygenOSBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FlashTWRPOxygenOSBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlashTWRPOxygenOSBTNActionPerformed(evt);
            }
        });

        BootloaderLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        BootloaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BootloaderLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/bootl.png"))); // NOI18N
        BootloaderLabel.setText("Bootloader");

        RecoveryLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RecoveryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RecoveryLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/recov.png"))); // NOI18N
        RecoveryLabel.setText("Recovery");

        RebootBootloaderBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RebootBootloaderBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/rebooto.png"))); // NOI18N
        RebootBootloaderBTN.setText("Reboot Bootloader");
        RebootBootloaderBTN.setToolTipText("");
        RebootBootloaderBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RebootBootloaderBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RebootBootloaderBTNActionPerformed(evt);
            }
        });

        RebootRecoveryBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RebootRecoveryBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/rebooto.png"))); // NOI18N
        RebootRecoveryBTN.setText("Reboot Recovery");
        RebootRecoveryBTN.setToolTipText("");
        RebootRecoveryBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RebootRecoveryBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RebootRecoveryBTNActionPerformed(evt);
            }
        });

        DebugConsole.setEditable(false);
        DebugConsole.setForeground(new java.awt.Color(204, 51, 0));
        DebugConsole.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DebugConsole.setCaretColor(new java.awt.Color(255, 0, 0));
        DebugConsole.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DebugConsole.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N

        RebootLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RebootLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RebootLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/reboot.png"))); // NOI18N
        RebootLabel.setText("Reboot");

        ConsoleLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        ConsoleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ConsoleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/depurar.png"))); // NOI18N
        ConsoleLabel.setText("Debug Console");

        CheckADBDevicesBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        CheckADBDevicesBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/ok16.png"))); // NOI18N
        CheckADBDevicesBTN.setText("Check adb devices");
        CheckADBDevicesBTN.setToolTipText("");
        CheckADBDevicesBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CheckADBDevicesBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckADBDevicesBTNActionPerformed(evt);
            }
        });

        CheckFastbootDevicesBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        CheckFastbootDevicesBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/ok16.png"))); // NOI18N
        CheckFastbootDevicesBTN.setText("Check fastboot devices");
        CheckFastbootDevicesBTN.setToolTipText("");
        CheckFastbootDevicesBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CheckFastbootDevicesBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckFastbootDevicesBTNActionPerformed(evt);
            }
        });

        OPLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OPLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/logo.png"))); // NOI18N
        OPLogo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        CheckLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        CheckLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CheckLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/check.png"))); // NOI18N
        CheckLabel.setText("Check");

        TaskBar.setToolTipText("TaskBar");
        TaskBar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/open.png"))); // NOI18N
        MenuFiles.setText("Files");
        MenuFiles.setToolTipText("");
        MenuFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuFiles.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N

        MenuItemOpenADB.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemOpenADB.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemOpenADB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/open16.png"))); // NOI18N
        MenuItemOpenADB.setText("adb Folder");
        MenuItemOpenADB.setToolTipText("The folder containing the adb & fastboot files will open");
        MenuItemOpenADB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemOpenADB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenADBActionPerformed(evt);
            }
        });
        MenuFiles.add(MenuItemOpenADB);
        MenuFiles.add(MenuFilesSeparator1);

        MenuIMGFolders.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/open16.png"))); // NOI18N
        MenuIMGFolders.setText("img Folder");
        MenuIMGFolders.setToolTipText("Empty or open the img folder");
        MenuIMGFolders.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuIMGFolders.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemOpenIMGFolder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemOpenIMGFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/open16.png"))); // NOI18N
        MenuItemOpenIMGFolder.setText("Open im folder");
        MenuItemOpenIMGFolder.setToolTipText("Open the img location where the user's files are located");
        MenuItemOpenIMGFolder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemOpenIMGFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenIMGFolderActionPerformed(evt);
            }
        });
        MenuIMGFolders.add(MenuItemOpenIMGFolder);

        MenuItemEmptyIMGFolder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemEmptyIMGFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/asterix.gif"))); // NOI18N
        MenuItemEmptyIMGFolder.setText("Empty img folder");
        MenuItemEmptyIMGFolder.setToolTipText("Delete all accumulated files in the img folder");
        MenuItemEmptyIMGFolder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemEmptyIMGFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEmptyIMGFolderActionPerformed(evt);
            }
        });
        MenuIMGFolders.add(MenuItemEmptyIMGFolder);

        MenuFiles.add(MenuIMGFolders);
        MenuFiles.add(MenuFilesSeparator2);

        MenuSubDirs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/open16.png"))); // NOI18N
        MenuSubDirs.setText("Open subdirs");
        MenuSubDirs.setToolTipText("Open the folders inside img");
        MenuSubDirs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuSubDirs.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemTWRP.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemTWRP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/rebooto.png"))); // NOI18N
        MenuItemTWRP.setText("TWRP");
        MenuItemTWRP.setToolTipText("This folder contains the image of the official recovery twrp");
        MenuItemTWRP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemTWRP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemTWRPActionPerformed(evt);
            }
        });
        MenuSubDirs.add(MenuItemTWRP);

        MenuItemFirmware.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemFirmware.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/depurar.png"))); // NOI18N
        MenuItemFirmware.setText("Firmware");
        MenuItemFirmware.setToolTipText("This folder contains OxygenOS 9.0.8");
        MenuItemFirmware.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemFirmware.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFirmwareActionPerformed(evt);
            }
        });
        MenuSubDirs.add(MenuItemFirmware);

        MenuItemRecovery.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemRecovery.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/recov.png"))); // NOI18N
        MenuItemRecovery.setText("Recovery");
        MenuItemRecovery.setToolTipText("This folder contains the TWRP Recovery but to flash the OxygenOS firmware");
        MenuItemRecovery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemRecovery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRecoveryActionPerformed(evt);
            }
        });
        MenuSubDirs.add(MenuItemRecovery);

        MenuFiles.add(MenuSubDirs);

        TaskBar.add(MenuFiles);

        MenuFlash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/flashb.png"))); // NOI18N
        MenuFlash.setText("Downloads");
        MenuFlash.setToolTipText("");
        MenuFlash.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuFlash.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        MenuItemFlashFirmware.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemFlashFirmware.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/edit_add16.png"))); // NOI18N
        MenuItemFlashFirmware.setText("Flash Firmware Stock");
        MenuItemFlashFirmware.setToolTipText("");
        MenuItemFlashFirmware.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemFlashFirmware.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFlashFirmwareActionPerformed(evt);
            }
        });
        MenuFlash.add(MenuItemFlashFirmware);

        MenuItemFlashFirmwareSeparator.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuFlash.add(MenuItemFlashFirmwareSeparator);

        MenuItemDownloadFirmware.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemDownloadFirmware.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/download.png"))); // NOI18N
        MenuItemDownloadFirmware.setText("Download last OxygenOS One Plus 5");
        MenuItemDownloadFirmware.setToolTipText("");
        MenuItemDownloadFirmware.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemDownloadFirmware.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDownloadFirmwareActionPerformed(evt);
            }
        });
        MenuFlash.add(MenuItemDownloadFirmware);

        TaskBar.add(MenuFlash);

        MenuOthers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/build.png"))); // NOI18N
        MenuOthers.setText("Others");
        MenuOthers.setToolTipText("");
        MenuOthers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuOthers.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        MenuItemRebootTool.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemRebootTool.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemRebootTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/button_ok.png"))); // NOI18N
        MenuItemRebootTool.setText("Reboot Tool");
        MenuItemRebootTool.setToolTipText("The Tool will be reset passively");
        MenuItemRebootTool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemRebootTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRebootToolActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemRebootTool);
        MenuOthers.add(MenuOthersSeparator1);

        MenuLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/len.png"))); // NOI18N
        MenuLang.setText("Language");
        MenuLang.setToolTipText("Select your language");
        MenuLang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuLang.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemSpanish.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        MenuItemSpanish.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemSpanish.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/spanish-language.png"))); // NOI18N
        MenuItemSpanish.setText("Español");
        MenuItemSpanish.setToolTipText("");
        MenuItemSpanish.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemSpanish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSpanishActionPerformed(evt);
            }
        });
        MenuLang.add(MenuItemSpanish);

        MenuOthers.add(MenuLang);
        MenuOthers.add(MenuOthersSeparator2);

        MenuTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/tool.png"))); // NOI18N
        MenuTool.setText("Other Tools");
        MenuTool.setToolTipText("Extra tools for different devices");
        MenuTool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuTool.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemOP5Tool.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemOP5Tool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/favicon.png"))); // NOI18N
        MenuItemOP5Tool.setText("OnePlus 5T Tool");
        MenuItemOP5Tool.setToolTipText("");
        MenuItemOP5Tool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemOP5Tool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOP5ToolActionPerformed(evt);
            }
        });
        MenuTool.add(MenuItemOP5Tool);

        MenuItemXiaomi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemXiaomi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/mi.png"))); // NOI18N
        MenuItemXiaomi.setText("Xiaomi MI A2/6X Tool");
        MenuItemXiaomi.setToolTipText("");
        MenuItemXiaomi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemXiaomi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemXiaomiActionPerformed(evt);
            }
        });
        MenuTool.add(MenuItemXiaomi);

        MenuOthers.add(MenuTool);
        MenuOthers.add(MenuOthersSeparator3);

        MenuItemEndJavaProcess.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemEndJavaProcess.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemEndJavaProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/java.png"))); // NOI18N
        MenuItemEndJavaProcess.setText("End Java process");
        MenuItemEndJavaProcess.setToolTipText("Java and Tool will be completely closed");
        MenuItemEndJavaProcess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemEndJavaProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEndJavaProcessActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemEndJavaProcess);
        MenuOthers.add(MenuOthersSeparator4);

        MenuItemEndAllProcess.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemEndAllProcess.setForeground(new java.awt.Color(204, 102, 0));
        MenuItemEndAllProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/cancel16.png"))); // NOI18N
        MenuItemEndAllProcess.setText("End all process");
        MenuItemEndAllProcess.setToolTipText("It will completely close the program and its open subprograms");
        MenuItemEndAllProcess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemEndAllProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEndAllProcessActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemEndAllProcess);
        MenuOthers.add(MenuOthersSeparator5);

        MenuItemUninstallTool.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        MenuItemUninstallTool.setForeground(new java.awt.Color(255, 51, 0));
        MenuItemUninstallTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/warn.png"))); // NOI18N
        MenuItemUninstallTool.setText("Uninstall Tool");
        MenuItemUninstallTool.setToolTipText("Remove tool and its files and folders");
        MenuItemUninstallTool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemUninstallTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemUninstallToolActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemUninstallTool);

        TaskBar.add(MenuOthers);

        MenuHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/info.png"))); // NOI18N
        MenuHelp.setText("Help");
        MenuHelp.setToolTipText("");
        MenuHelp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuHelp.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N

        MenuItemChangelog.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemChangelog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/new16.png"))); // NOI18N
        MenuItemChangelog.setText("Changelog");
        MenuItemChangelog.setToolTipText("");
        MenuItemChangelog.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemChangelog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemChangelogActionPerformed(evt);
            }
        });
        MenuHelp.add(MenuItemChangelog);
        MenuHelp.add(MenuHelpSeparator1);

        MenuItemCredits.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemCredits.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/new16.png"))); // NOI18N
        MenuItemCredits.setText("Credits");
        MenuItemCredits.setToolTipText("Author Credits");
        MenuItemCredits.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCreditsActionPerformed(evt);
            }
        });
        MenuHelp.add(MenuItemCredits);
        MenuHelp.add(MenuHelpSeparator2);

        MenuItemLisence.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemLisence.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/new16.png"))); // NOI18N
        MenuItemLisence.setText("License");
        MenuItemLisence.setToolTipText("");
        MenuItemLisence.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemLisence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemLisenceActionPerformed(evt);
            }
        });
        MenuHelp.add(MenuItemLisence);
        MenuHelp.add(MenuHelpSeparator3);

        MenuCodeOthers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/code.png"))); // NOI18N
        MenuCodeOthers.setText("Code/Others");
        MenuCodeOthers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuCodeOthers.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemPage.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/web.png"))); // NOI18N
        MenuItemPage.setText("WebSite");
        MenuItemPage.setToolTipText("Developer page for contact");
        MenuItemPage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPageActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemPage);

        MenuItemReleases.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemReleases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/update.png"))); // NOI18N
        MenuItemReleases.setText("Releases");
        MenuItemReleases.setToolTipText("Tool Downloads");
        MenuItemReleases.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemReleases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemReleasesActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemReleases);

        MenuItemGit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemGit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/git.png"))); // NOI18N
        MenuItemGit.setText("GitHub");
        MenuItemGit.setToolTipText("Java program code");
        MenuItemGit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemGit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGitActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemGit);

        MenuItemBugs.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemBugs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oneplus/images/bug.png"))); // NOI18N
        MenuItemBugs.setText("Bugs");
        MenuItemBugs.setToolTipText("Errors that are recorded in the program");
        MenuItemBugs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemBugs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemBugsActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemBugs);

        MenuHelp.add(MenuCodeOthers);

        TaskBar.add(MenuHelp);

        setJMenuBar(TaskBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LockBootloaderBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UnlockBootloaderBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BootloaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FlashTWRPOfficialBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RecoveryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FlashTWRPOxygenOSBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(RebootRecoveryBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RebootBootloaderBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RebootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CheckADBDevicesBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(CheckFastbootDevicesBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CheckLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(ConsoleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DebugConsole, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addComponent(OPLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(OPLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BootloaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RebootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RebootBootloaderBTN)
                    .addComponent(UnlockBootloaderBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LockBootloaderBTN)
                    .addComponent(RebootRecoveryBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConsoleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DebugConsole, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RecoveryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(CheckLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FlashTWRPOfficialBTN)
                    .addComponent(CheckADBDevicesBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FlashTWRPOxygenOSBTN)
                    .addComponent(CheckFastbootDevicesBTN))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("Tool for OnePlus");
        getAccessibleContext().setAccessibleParent(this);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
try {
            System.out.println("Setting look and feel...");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            System.out.println("Ready! :) ");
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            System.out.println("Unable to set LookAndFeel");
        }
        
    this.setIconImage(new ImageIcon(getClass().getResource("/oneplus/Icon.png")).getImage());
           
    DebugConsole.setText("Welcome to OnePlus 5 Tool");
    
        Socket sock= new Socket();
        InetSocketAddress addr=new InetSocketAddress("www.google.com",80);
        try {
        sock.connect(addr,3000);
        
        File f = new File("C:\\adb\\adb.exe"); 
        
        if (!f.exists() == true){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"The adb & fastboot files could not be found \n\n The file will be installed in C:\\adb","Error",JOptionPane.ERROR_MESSAGE);
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Starting...");
        JFrame frame = new JFrame("Downloading adb & fastboot...");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setAlwaysOnTop(true);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://bitbucket.org/Franco28/flashtool-motorola-moto-g5-g5plus/downloads/adb.zip");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\adb\\adb.zip");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000d);
                            // update progress bar
                            jProgressBar.setString("Calculating file size...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Downloading adb & fastboot... " +currentProgress+ " Bytes");
                                jProgressBar.setString("Downloading adb & fastboot: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                    DebugConsole.setText("Welcome to OnePlus 5 Tool");
                    frame.setVisible(false);
 
        File adb = new File("C:\\adb\\adb.zip"); 
        String zipFilePath = "C:\\adb\\adb.zip";
        String destDirectory = "C:\\adb";
        oneplus.UnzipUtility unzipper = new oneplus.UnzipUtility();
        try {
            unzipper.unzip(zipFilePath, destDirectory);
        } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Could not unzip file " +adb,"Error",JOptionPane.ERROR_MESSAGE);
        }
            adb.delete();
            dispose();//To close the current window
            String path = "Tool.exe";
            File file = new File(path);
            Process t = Runtime.getRuntime().exec(file.getAbsolutePath());
 
    }
            }catch (FileNotFoundException e) {
            if (runnable != null) runnable.run();
            jProgressBar.setString("Downloading adb & fastboot: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                if (runnable != null) runnable.run();
                Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start(); 
 }
        
        File bin = new File("C:\\OPTool\\.settings"); 
        if (!bin.exists() == true){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudieron encontrar los binarios \n\n El archivo se instalará en C:\\OPTool\\.settings","Error",JOptionPane.ERROR_MESSAGE);
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Starting...");
        JFrame frame = new JFrame("Downloading binarios...");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setAlwaysOnTop(true);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://bitbucket.org/Franco28/flashtool-motorola-moto-g5-g5plus/downloads/bin.zip");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\OPTool\\.settings\\bin.zip");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {                       
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000);
                            // update progress bar
                            jProgressBar.setString("Calculating file size...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Downloading binarios... " +currentProgress+ " Bytes");
                                jProgressBar.setString("Downloading binarios: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                    DebugConsole.setText("Welcome to OnePlus 5 Tool");
                    frame.setVisible(false);
        
        File lib = new File("C:\\OPTool\\.settings\\bin.zip"); 
        String zipFilePath = "C:\\OPTool\\.settings\\bin.zip";
        String destDirectory = "C:\\OPTool\\.settings";
        oneplus.UnzipUtility unzipper = new oneplus.UnzipUtility();
        try {
            unzipper.unzip(zipFilePath, destDirectory);
        } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Could not unzip file " +lib,"Error",JOptionPane.ERROR_MESSAGE);
        }
            lib.delete();
            dispose();//To close the current window
            String path = "Tool.exe";
            File file = new File(path);
            Process t = Runtime.getRuntime().exec(file.getAbsolutePath());
 
    }
            }catch (FileNotFoundException e) {
            if (runnable != null) runnable.run();
            jProgressBar.setString("Downloading binarios: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                if (runnable != null) runnable.run();
                Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start(); 
 }
        
        }catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        DebugConsole.setText("Error could not connect to server.");            
        JOptionPane.showMessageDialog(null,"Check your internet connection and try again....","Error",JOptionPane.ERROR_MESSAGE);
        dispose();//To close the current window         
        }finally{
            try { 
            sock.close(); 
        }catch (IOException e) { 
            }
        } 
        
        File f = new File("C:\\OPTool\\img"); 
        if (!f.exists() == true){
// Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\OPTool";
  String strManyDirectories="C:\\OPTool\\img\\firmware";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
        File optool = new File("OPTool"); 
        if (!optool.exists() == true){
// Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\OPTool";
  String strManyDirectories="C:\\OPTool\\img";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
        
        File binf = new File("C:\\OPTool\\.settings\\bin"); 
        if (!binf.exists() == true){
// Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\OPTool\\.settings";
  String strManyDirectories="C:\\OPTool\\.settings\\bin";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
        
    File r = new File("C:\\OPTool\\img\\recovery"); 
    if (!r.exists() == true){
 // Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\OPTool\\img";
  String strManyDirectories="C:\\OPTool\\img\\recovery";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }
  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}

        File tr = new File("C:\\OPTool\\img\\twrp"); 
        if (!tr.exists() == true){    
 // Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\OPTool\\img";
  String strManyDirectories="C:\\OPTool\\img\\twrp";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");   
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
        File adb = new File("C:\\adb"); 
        if (!adb.exists() == true){
  try{
  String strDirectoy ="C:\\adb";
  String strManyDirectories="C:\\adb";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");     
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }
  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}

    File se = new File("C:\\OPTool\\.settings"); 
    if (!se.exists() == true){
  try{
  String strDirectoy ="C:\\OPTool\\.settings";
  String strManyDirectories="C:\\OPTool\\.settings";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a OnePlus Tool");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
    }
  
    }//GEN-LAST:event_formWindowOpened

    private void UnlockBootloaderBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnlockBootloaderBTNActionPerformed
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    int reply = JOptionPane.showOptionDialog(null, 
            "This process will erase all your internal memory, make backup before continuing", 
            "Warning! Do you want to continue?",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE, 
            null,
            new String[]{"Yes, continue", "No"},
            null);
    if (reply == JOptionPane.YES_OPTION) {   
    JOptionPane.showMessageDialog(null,"Por favor activa las opciones de desarrollador y activa: \n\n - Desbloqueo OEM \n\n - Depuración por USB");
    final File file = new File("C:\\OPTool\\.settings\\bin\\unlock.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Unlock Bootloader");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Unlock Bootloader...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("fastboot oem unlock");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\unlock.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}          
        }else {
              if (runnable != null) runnable.run();
              JOptionPane.showMessageDialog(null, "Proceso cancelado");
              dispose();//To close the current window
              new OPVisual().setVisible(true);  
        }
    }//GEN-LAST:event_UnlockBootloaderBTNActionPerformed

    private void FlashTWRPOfficialBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlashTWRPOfficialBTNActionPerformed
        Socket sock= new Socket();
        InetSocketAddress addr=new InetSocketAddress("www.google.com",80);
        try {
        sock.connect(addr,3000);       
        
        File f = new File("C:\\OPTool\\img\\twrp\\twrp-3.3.1-0-cheeseburger.img"); 
        
        if(!f.exists()){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not find TWRP Official to flash ROM","Error",JOptionPane.ERROR_MESSAGE);
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Starting...");
        JFrame frame = new JFrame("Downloading TWRP Oficial Cheeseburger...");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://bitbucket.org/Franco28/flashtool-motorola-moto-g5-g5plus/downloads/twrp-3.3.1-0-cheeseburger.img");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\OPTool\\img\\twrp\\twrp-3.3.1-0-cheeseburger.img");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000d);
                            // update progress bar
                            jProgressBar.setString("Calculating file size...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Downloading TWRP Official Cheeseburger..." +currentProgress+ " Bytes");
                                jProgressBar.setString("Downloading TWRP Official Cheeseburger: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                    DebugConsole.setText("Welcome to OnePlus 5 Tool");
                    frame.setVisible(false);
                }
            }catch (FileNotFoundException e) {
            if (runnable != null) runnable.run();
            jProgressBar.setString("Downloading TWRP Official Cheeseburger: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start();
 }
           
        }catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        DebugConsole.setText("Error could not connect to server.");            
        JOptionPane.showMessageDialog(null,"Check your internet connection and try again....","Error",JOptionPane.ERROR_MESSAGE);
        dispose();//To close the current window 
       
        }finally{
            try { 
            sock.close(); 
        }catch (IOException e) { 
            }
        } 
        
    File f = new File("C:\\OPTool\\img\\twrp\\twrp-3.3.1-0-cheeseburger.img");
   
    if(f.exists() == true){
    final File file = new File("C:\\OPTool\\.settings\\bin\\twrp.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title FLASH OP5 TWRP");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Flashear TWRP twrp-3.3.1-0-cheeseburger for OP5...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("cd C:\\OPTool\\img\\twrp");
            writer.println("echo.");
            writer.println("fastboot flash recovery twrp-3.3.1-0-cheeseburger.img");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\twrp.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}
  }
    }//GEN-LAST:event_FlashTWRPOfficialBTNActionPerformed

    private void RebootBootloaderBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RebootBootloaderBTNActionPerformed
    final File file = new File("C:\\OPTool\\.settings\\bin\\rebootb.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Reboot Bootloader");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Reboot Bootloader...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("adb reboot bootloader");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\rebootb.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }     
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
} 
    }//GEN-LAST:event_RebootBootloaderBTNActionPerformed

    private void CheckADBDevicesBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckADBDevicesBTNActionPerformed
    final File file = new File("C:\\OPTool\\.settings\\bin\\checkadb.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Check adb devices");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Check adb devices...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("adb devices");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\checkadb.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
    }//GEN-LAST:event_CheckADBDevicesBTNActionPerformed

    private void RebootRecoveryBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RebootRecoveryBTNActionPerformed
    final File file = new File("C:\\OPTool\\.settings\\bin\\rebootr.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Reboot Recovery");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Reboot Recovery...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("adb reboot recovery");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
          final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
          if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\rebootr.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
    }//GEN-LAST:event_RebootRecoveryBTNActionPerformed

    private void CheckFastbootDevicesBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckFastbootDevicesBTNActionPerformed
final File file = new File("C:\\OPTool\\.settings\\bin\\checkf.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Check fastboot devices");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Check fastboot devices...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("fastboot devices");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\checkf.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
              this.dispose();//To close the current window
              String path = "Tool.exe";
              File kill = new File(path);
        try { 
            Process t = Runtime.getRuntime().exec(file.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CheckFastbootDevicesBTNActionPerformed

    private void FlashTWRPOxygenOSBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlashTWRPOxygenOSBTNActionPerformed
        Socket sock= new Socket();
        InetSocketAddress addr=new InetSocketAddress("www.google.com",80);
        try {
        sock.connect(addr,3000);       
        
        File f = new File("C:\\OPTool\\img\\recovery\\twrp-3.3.1-0-20190713-codeworkx-cheeseburger.img"); 
        
        if(!f.exists()){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Could not find TWRP To Flash Stock OxygenOS","Error",JOptionPane.ERROR_MESSAGE);
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Starting...");
        JFrame frame = new JFrame("Downloading TWRP To Flash Stock OxygenOS...");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://bitbucket.org/Franco28/flashtool-motorola-moto-g5-g5plus/downloads/twrp-3.3.1-0-20190713-codeworkx-cheeseburger.img");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\OPTool\\img\\recovery\\twrp-3.3.1-0-20190713-codeworkx-cheeseburger.img");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000d);
                            // update progress bar
                            jProgressBar.setString("Calculating file size...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Downloading TWRP To Flash Stock OxygenOS..." +currentProgress+ " Bytes");
                                jProgressBar.setString("Downloading TWRP To Flash Stock OxygenOS: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                    DebugConsole.setText("Welcome to OnePlus 5 Tool");
                    frame.setVisible(false);
                }
            }catch (FileNotFoundException e) {
            if (runnable != null) runnable.run();
            jProgressBar.setString("Downloading TWRP To Flash Stock OxygenOS: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                if (runnable != null) runnable.run();
                Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start();
 }
        
    File of = new File("C:\\OPTool\\img\\recovery\\twrp-3.3.1-0-20190713-codeworkx-cheeseburger.img");
   
    if(of.exists() == true){
    final File file = new File("C:\\OPTool\\.settings\\bin\\recovery.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title FLASH OP5 TWRP");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Flash twrp-3.3.1-0-20190713-codeworkx-cheeseburger for OP5...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("cd C:\\OPTool\\img\\recovery");
            writer.println("echo.");
            writer.println("fastboot flash recovery twrp-3.3.1-0-20190713-codeworkx-cheeseburger.img");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\recovery.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}
  }
        }catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        DebugConsole.setText("Error could not connect to server.");            
        JOptionPane.showMessageDialog(null,"Check your internet connection and try again....","Error",JOptionPane.ERROR_MESSAGE);
        dispose();//To close the current window 
        }finally{
            try { 
            sock.close(); 
        }catch (IOException e) { 
            }
        } 
    }//GEN-LAST:event_FlashTWRPOxygenOSBTNActionPerformed

    private void LockBootloaderBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LockBootloaderBTNActionPerformed
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    int reply = JOptionPane.showOptionDialog(null, 
            "This process will erase all your internal memory, make backup before continuing", 
            "Warning! Do you want to continue?",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE, 
            null,
            new String[]{"Yes, continue", "No"},
            null);
    if (reply == JOptionPane.YES_OPTION) {  
    final File file = new File("C:\\OPTool\\.settings\\bin\\lock.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Lock Bootloader");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Lock Bootloader...");
            writer.println("echo.");
            writer.println("echo Press any key to continue...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("fastboot oem lock");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\lock.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}             
        }else {
              if (runnable != null) runnable.run();
              JOptionPane.showMessageDialog(null, "Proceso cancelado");
              dispose();//To close the current window
              new OPVisual().setVisible(true);  
        } 
    }//GEN-LAST:event_LockBootloaderBTNActionPerformed

    private void MenuItemChangelogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemChangelogActionPerformed
        final File file = new File("C:\\OPTool\\.settings\\bin\\changeloges.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Registros de cambios");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo #############");   
            writer.println("echo # CHANGELOG #");            
            writer.println("echo #############");       
            writer.println("echo. ");   
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.0-RC1 *");  
            writer.println("echo ***************");   
            writer.println("echo - First compilation");            
            writer.println("echo - Support for OnePlus 5 (Cheesburger)");  
            writer.println("echo - Added automatic file downloads");   
            writer.println("echo. ");   
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.1-RC1 *");  
            writer.println("echo ***************");   
            writer.println("echo - Added icon to the application");  
            writer.println("echo - Fixed problem unlocking bootloader");   
            writer.println("echo - The .log file was moved to .settings");  
            writer.println("echo.");
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.2-RC1 *");  
            writer.println("echo ***************");   
            writer.println("echo - Fixed infinite loop when downloading the necessary files to use the Tool");  
            writer.println("echo - Added new features and progress bar when downloading the file");  
            writer.println("echo - Added Unzip utility to be able to decompress .zip files automatically");  
            writer.println("echo - Added function to end processes since some are open in the background");  
            writer.println("echo. ");  
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.3-RC1 *");  
            writer.println("echo ***************"); 
            writer.println("echo - Fixed the necessary files to use the Tool");  
            writer.println("echo - Added lost mistakes");  
            writer.println("echo - Removed unusable code");  
            writer.println("echo. ");
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.4-RC1 *");  
            writer.println("echo ***************"); 
            writer.println("echo - Fixed internal errors");  
            writer.println("echo - New method of using the necessary files by batch");  
            writer.println("echo - Added icons in places where they were missing");  
            writer.println("echo - Fixed scripts");  
            writer.println("echo - The files were moved to the path C:\\");  
            writer.println("echo - Added option to delete Tool files without having to go to your location");  
            writer.println("echo. ");
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.5-RC1 *");  
            writer.println("echo ***************"); 
            writer.println("echo - Added OnePlus 5T Dumpling (Beta)"); 
            writer.println("echo - Fixed internal errors in the code ");  
            writer.println("echo - Windows UI");  
            writer.println("echo - Added new scripts");  
            writer.println("echo. "); 
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.6-RC1 *");  
            writer.println("echo ***************"); 
            writer.println("echo - Scripts are now created automatically if the program requires it and deletes them");  
            writer.println("echo - Fixed the function of uninstalling the Tool completely without leaving files");  
            writer.println("echo - Fixed errors in the UI");  
            writer.println("echo - OnePlus 5T device was removed for now");  
            writer.println("echo.");
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.7-RC1 *");  
            writer.println("echo ***************"); 
            writer.println("echo - Fixed the bug when the files needed to use the Tool finished working");  
            writer.println("echo - Fixed other internal errors and eliminated unusable code");  
            writer.println("echo - Added size detector in the Folder img when emptying");  
            writer.println("echo - Add new English language");  
            writer.println("echo - Change records were moved to a new directory and use the new function to be created and deleted");  
            writer.println("echo.");
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.8-RC1 *");  
            writer.println("echo ***************"); 
            writer.println("echo - Added windows alert sound");
            writer.println("echo - Fix cursor in download bar");
            writer.println("echo - Fixed English language");
            writer.println("echo - Fixed errors in the graphic interface");
            writer.println("echo - Other internal arrangements");
            writer.println("echo.");
            writer.println("echo Press any key to exit...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        } 
           Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\changeloges.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }     
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
} 
    }//GEN-LAST:event_MenuItemChangelogActionPerformed

    private void MenuItemCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCreditsActionPerformed
              new oneplus.credits().setVisible(true); 
    }//GEN-LAST:event_MenuItemCreditsActionPerformed

    private void MenuItemOpenADBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenADBActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\adb");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Folder " +dirToOpen+ "Not found","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemOpenADBActionPerformed

    private void MenuItemRebootToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRebootToolActionPerformed
              this.dispose();//To close the current window
              new OPENVisual().setVisible(true);
    }//GEN-LAST:event_MenuItemRebootToolActionPerformed

    private void MenuItemEndJavaProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEndJavaProcessActionPerformed
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM javaw.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Error Could not close" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM Tool.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Error Could not close" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    System.exit(0);
    }//GEN-LAST:event_MenuItemEndJavaProcessActionPerformed

    private void MenuItemSpanishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSpanishActionPerformed
    this.dispose();
    new OPVisual().setVisible(true);
    }//GEN-LAST:event_MenuItemSpanishActionPerformed

    private void MenuItemFlashFirmwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFlashFirmwareActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Option not available...");     
    }//GEN-LAST:event_MenuItemFlashFirmwareActionPerformed

    private void MenuItemDownloadFirmwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDownloadFirmwareActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        int reply = JOptionPane.showConfirmDialog(null, "Durante la descarga no podra utilziar el Tool! \n\n Para verificar la descarga se abrirá la Folder", "Warning! Do you want to continue?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {       
        Socket sock= new Socket();
        InetSocketAddress addr=new InetSocketAddress("www.google.com",80);
        try {
        sock.connect(addr,3000);       
        
        File f = new File("C:\\OPTool\\img\\firmware\\OnePlus5Oxygen_23_OTA_051_all_1907311835_5de64c.zip"); 
        
        if(!f.exists()){
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Starting...");
        JFrame frame = new JFrame("Downloading OnePlus5Oxygen_23_OTA_051_all_1907311835_5de64c....");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://otafsg1.h2os.com/patch/amazone2/GLO/OnePlus5Oxygen/OnePlus5Oxygen_23.J.51_GLO_051_1907311835/OnePlus5Oxygen_23_OTA_051_all_1907311835_5de64c.zip");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\OPTool\\img\\firmware\\OnePlus5Oxygen_23_OTA_051_all_1907311835_5de64c.zip");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000d);
                            // update progress bar
                            jProgressBar.setString("Calculating file size...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Downloading OnePlus5Oxygen_23_OTA_051_all_1907311835_5de64c..." +currentProgress+ " Bytes");
                                jProgressBar.setString("Downloading OnePlus5Oxygen_23_OTA_051_all_1907311835_5de64c: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                   DebugConsole.setText("Welcome to OnePlus 5 Tool");
                    frame.setVisible(false);
                }
            }catch (FileNotFoundException e) {
            jProgressBar.setString("Downloading OnePlus5Oxygen_23_OTA_051_all_1907311835_5de64c: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start();
    
 }
           
        }catch (IOException e) {
        if (runnable != null) runnable.run();
        DebugConsole.setText("Error could not connect to server.");            
        JOptionPane.showMessageDialog(null,"Check your internet connection and try again....","Error",JOptionPane.ERROR_MESSAGE);
        dispose();//To close the current window 
       
        }finally{
            try { 
            sock.close(); 
        }catch (IOException e) { 
            }
        } 
    }
    if (runnable != null) runnable.run();
    int reply2 = JOptionPane.showConfirmDialog(null, "Do you want to flash the firmware now? If you accept, you must have the phone connected so it will enter recovery mode", "Warning! Do you want to continue?", JOptionPane.YES_NO_OPTION);
    if (reply2 == JOptionPane.YES_OPTION) {     
    File f = new File("C:\\OPTool\\img\\bootloader\\rebootr.bat");
    if(f.exists() == true){        
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\twrp.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}
  }
    }
       Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Move the firmware to the internal memory of the phone");
        try {
            dirToOpen = new File("C:\\OPTool\\img\\firmware");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Folder " +dirToOpen+ " Not found","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            if (runnable != null) runnable.run();
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemDownloadFirmwareActionPerformed

    private void MenuItemRecoveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRecoveryActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\OPTool\\img\\recovery");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Folder " +dirToOpen+ " Not found","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemRecoveryActionPerformed

    private void MenuItemTWRPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemTWRPActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\OPTool\\img\\twrp");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Folder " +dirToOpen+ " Not found","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemTWRPActionPerformed

    private void MenuItemFirmwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFirmwareActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\OPTool\\img\\firmware");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Folder " +dirToOpen+ " Not found","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemFirmwareActionPerformed

    private void MenuItemXiaomiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemXiaomiActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Option not available...");     
    }//GEN-LAST:event_MenuItemXiaomiActionPerformed

    private void MenuItemEndAllProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEndAllProcessActionPerformed
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM javaw.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Could not close" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM Tool.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Could not close" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM adb.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Could not close" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
        try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM fastboot.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Could not close" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_MenuItemEndAllProcessActionPerformed

    private void MenuItemBugsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemBugsActionPerformed
try {
    Runtime.getRuntime().exec(new String[] { "c:\\Windows\\notepad.exe", "C:\\OPTool\\.settings\\others\\bugs.txt" });
} catch (IOException e) {
} 
    }//GEN-LAST:event_MenuItemBugsActionPerformed

    private void MenuItemLisenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemLisenceActionPerformed
try {
    Runtime.getRuntime().exec(new String[] { "c:\\Windows\\notepad.exe", "C:\\OPTool\\.settings\\LICENSE.txt" });
} catch (IOException e) {
} 
    }//GEN-LAST:event_MenuItemLisenceActionPerformed

    private void MenuItemPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPageActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://franco28.github.io/stockrom/tool.html"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemPageActionPerformed

    private void MenuItemGitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGitActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://github.com/Franco28/FlashTool-OP"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemGitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        final File file = new File("C:\\OPTool\\.settings\\bin\\kill.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("color C");
            writer.println("TASKKILL /F /IM Tool.exe");
            writer.println("TASKKILL /F /IM javaw.exe");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("TASKKILL /F /IM javaw.exe");
            writer.println("TASKKILL /F /IM Tool.exe");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("if exist C:\\OPTool\\.settings\\bin\\changeloges.bat (");
            writer.println("del C:\\OPTool\\.settings\\bin\\changeloges.bat");
            writer.println(") else (");
            writer.println("rem file doesn't exist\n");
            writer.println(")");
            writer.println("if exist C:\\OPTool\\.settings\\bin\\changelogen.bat (");
            writer.println("del C:\\OPTool\\.settings\\bin\\changelogen.bat");
            writer.println(") else (");
            writer.println("rem file doesn't exist\n");
            writer.println(")");
            writer.println("");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\OPTool\\.settings\\bin\\kill.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
    }//GEN-LAST:event_formWindowClosing

    private void MenuItemUninstallToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemUninstallToolActionPerformed
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
        int reply = JOptionPane.showConfirmDialog(null, "All Folders and the same Tool will be deleted!", "Warning! Do you want to continue?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {               
                try {
                Path directory = Paths.get("C:\\OPTool");
                Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {
                        Files.delete(file); // this will work because it's always a File
                        return FileVisitResult.CONTINUE;
                    }
                    
                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                        Files.delete(dir); //this will work because Files in the directory are already deleted
                        return FileVisitResult.CONTINUE;
                    }
                });
            } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null, "Could not delete " +ex,"Error",JOptionPane.ERROR_MESSAGE);
            }

        final File file = new File("uninstall.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"Could not create file","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("titel Eliminando Tool...");
            writer.println("color C");
            writer.println("TASKKILL /IM Tool.exe /F");
            writer.println("TASKKILL /IM javaw.exe /F");
            writer.println("For /F \"tokens=*\" %%I in ('Dir C:\\Users\\%USERNAME%\\Desktop\\Tool.exe /s /b') do set FOUND=\"%%~fI\"");
            writer.println("del %FOUND%");
            writer.println("del \"%~f0\" & exit");
        }catch (IOException e) {
        if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start uninstall.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}
        }else{
            dispose();//To close the current window
            String path = "Tool.exe";
            File file = new File(path);
            try {
                Process t = Runtime.getRuntime().exec(file.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }//GEN-LAST:event_MenuItemUninstallToolActionPerformed

    private void MenuItemOpenIMGFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenIMGFolderActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\OPTool\\img");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Folder " +dirToOpen+ " Not found " +iae,"Error",JOptionPane.ERROR_MESSAGE);
            dispose();//To close the current window
            String path = "Tool.exe";
            File file = new File(path);
            try {   
                Process t = Runtime.getRuntime().exec(file.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemOpenIMGFolderActionPerformed

    private void MenuItemEmptyIMGFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEmptyIMGFolderActionPerformed
        	File files = new File("C:\\OPTool\\img");
		long size = 0;
		size = getFileFolderSize(files);
		double sizeMB = (double) size / 1024 / 1024;
		String s = " MB";
		if (sizeMB < 1) {
			sizeMB = (double) size / 1024;
			s = " KB";
		}
                DebugConsole.setText("Folder size " +files.getName()+ " : " +sizeMB +s);
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
    int reply = JOptionPane.showOptionDialog(null, 
            "All the contents of the img! Folder will be deleted", 
            "Warning! Do you want to continue?",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE, 
            null,
            new String[]{"Yes, continue", "No"},
            null);
    if (reply == JOptionPane.YES_OPTION) {            
            try {
                Path directory = Paths.get("C:\\OPTool\\img");
                Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {
                        Files.delete(file); // this will work because it's always a File
                        return FileVisitResult.CONTINUE;
                    }
                    
                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                        Files.delete(dir); //this will work because Files in the directory are already deleted
                        return FileVisitResult.CONTINUE;
                    }
                });
              this.dispose();//To close the current window
              String path = "Tool.exe";
              File file = new File(path);
        try { 
            Process t = Runtime.getRuntime().exec(file.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        } 
            } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null, "Could not delete " +ex,"Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        if (reply == JOptionPane.NO_OPTION) {            
              this.dispose();//To close the current window
              String path = "Tool.exe";
              File file = new File(path);
        try { 
            Process t = Runtime.getRuntime().exec(file.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(OPVisual.class.getName()).log(Level.SEVERE, null, ex);
        }      
        }    
    }//GEN-LAST:event_MenuItemEmptyIMGFolderActionPerformed

    private void MenuItemOP5ToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOP5ToolActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "This Tool is not ready yet!");     
    }//GEN-LAST:event_MenuItemOP5ToolActionPerformed

    private void MenuItemReleasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemReleasesActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://github.com/Franco28/FlashTool-OP/releases"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemReleasesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OPVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new OPVisual().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BootloaderLabel;
    private javax.swing.JButton CheckADBDevicesBTN;
    private javax.swing.JButton CheckFastbootDevicesBTN;
    private javax.swing.JLabel CheckLabel;
    private javax.swing.JLabel ConsoleLabel;
    private javax.swing.JFormattedTextField DebugConsole;
    private javax.swing.JButton FlashTWRPOfficialBTN;
    private javax.swing.JButton FlashTWRPOxygenOSBTN;
    private javax.swing.JButton LockBootloaderBTN;
    private javax.swing.JMenu MenuCodeOthers;
    private javax.swing.JMenu MenuFiles;
    private javax.swing.JPopupMenu.Separator MenuFilesSeparator1;
    private javax.swing.JPopupMenu.Separator MenuFilesSeparator2;
    private javax.swing.JMenu MenuFlash;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JPopupMenu.Separator MenuHelpSeparator1;
    private javax.swing.JPopupMenu.Separator MenuHelpSeparator2;
    private javax.swing.JPopupMenu.Separator MenuHelpSeparator3;
    private javax.swing.JMenu MenuIMGFolders;
    private javax.swing.JMenuItem MenuItemBugs;
    private javax.swing.JMenuItem MenuItemChangelog;
    private javax.swing.JMenuItem MenuItemCredits;
    private javax.swing.JMenuItem MenuItemDownloadFirmware;
    private javax.swing.JMenuItem MenuItemEmptyIMGFolder;
    private javax.swing.JMenuItem MenuItemEndAllProcess;
    private javax.swing.JMenuItem MenuItemEndJavaProcess;
    private javax.swing.JMenuItem MenuItemFirmware;
    private javax.swing.JMenuItem MenuItemFlashFirmware;
    private javax.swing.JPopupMenu.Separator MenuItemFlashFirmwareSeparator;
    private javax.swing.JMenuItem MenuItemGit;
    private javax.swing.JMenuItem MenuItemLisence;
    private javax.swing.JMenuItem MenuItemOP5Tool;
    private javax.swing.JMenuItem MenuItemOpenADB;
    private javax.swing.JMenuItem MenuItemOpenIMGFolder;
    private javax.swing.JMenuItem MenuItemPage;
    private javax.swing.JMenuItem MenuItemRebootTool;
    private javax.swing.JMenuItem MenuItemRecovery;
    private javax.swing.JMenuItem MenuItemReleases;
    private javax.swing.JMenuItem MenuItemSpanish;
    private javax.swing.JMenuItem MenuItemTWRP;
    private javax.swing.JMenuItem MenuItemUninstallTool;
    private javax.swing.JMenuItem MenuItemXiaomi;
    private javax.swing.JMenu MenuLang;
    private javax.swing.JMenu MenuOthers;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator1;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator2;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator3;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator4;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator5;
    private javax.swing.JMenu MenuSubDirs;
    private javax.swing.JMenu MenuTool;
    private javax.swing.JLabel OPLogo;
    private javax.swing.JButton RebootBootloaderBTN;
    private javax.swing.JLabel RebootLabel;
    private javax.swing.JButton RebootRecoveryBTN;
    private javax.swing.JLabel RecoveryLabel;
    private javax.swing.JMenuBar TaskBar;
    private javax.swing.JButton UnlockBootloaderBTN;
    // End of variables declaration//GEN-END:variables

}
