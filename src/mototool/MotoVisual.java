/*
 * Copyright 2019 Franco.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Tool Es
 * 
 * @author (Franco Mato - franco28) 
 * @version (1.0.0.0.RC1)
 * 
 * 
 */

package mototool;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.JFrame;
import java.io.File;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.ImageIcon;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static mototool.MotoTool.OS;
import static mototool.size.getFileFolderSize;


public class MotoVisual extends javax.swing.JFrame {
       
    /**
     * Creates new form MotoVisual
     */
    public MotoVisual() {
        initComponents();
    }
           
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UnlockBootloaderBTN = new javax.swing.JButton();
        LockBootloaderBTN = new javax.swing.JButton();
        FlashTWRPOfficialBTN = new javax.swing.JButton();
        FlashTWRPOxygenOSBTN = new javax.swing.JButton();
        BootloaderLabel = new javax.swing.JLabel();
        RecoveryLabel = new javax.swing.JLabel();
        RebootBootloaderBTN = new javax.swing.JButton();
        RebootRecoveryBTN = new javax.swing.JButton();
        DebugConsole = new javax.swing.JFormattedTextField();
        RebootLabel = new javax.swing.JLabel();
        ConsoleLabel = new javax.swing.JLabel();
        CheckADBDevicesBTN = new javax.swing.JButton();
        CheckFastbootDevicesBTN = new javax.swing.JButton();
        OPLogo = new javax.swing.JLabel();
        CheckLabel = new javax.swing.JLabel();
        TaskBar = new javax.swing.JMenuBar();
        MenuFiles = new javax.swing.JMenu();
        MenuItemOpenADB = new javax.swing.JMenuItem();
        MenuFilesSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuIMGFolders = new javax.swing.JMenu();
        MenuItemOpenIMGFolder = new javax.swing.JMenuItem();
        MenuItemEmptyIMGFolder = new javax.swing.JMenuItem();
        MenuFilesSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuSubDirs = new javax.swing.JMenu();
        MenuItemTWRP = new javax.swing.JMenuItem();
        MenuItemFirmware = new javax.swing.JMenuItem();
        MenuItemRecovery = new javax.swing.JMenuItem();
        MenuFlash = new javax.swing.JMenu();
        MenuItemFlashFirmware = new javax.swing.JMenuItem();
        MenuItemFlashFirmwareSeparator = new javax.swing.JPopupMenu.Separator();
        MenuItemDownloadFirmware = new javax.swing.JMenuItem();
        MenuOthers = new javax.swing.JMenu();
        MenuItemRebootTool = new javax.swing.JMenuItem();
        MenuOthersSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuLang = new javax.swing.JMenu();
        MenuItemEnglish = new javax.swing.JMenuItem();
        MenuOthersSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuTool = new javax.swing.JMenu();
        MenuItemOP5Tool = new javax.swing.JMenuItem();
        MenuItemXiaomi = new javax.swing.JMenuItem();
        MenuOthersSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuItemEndJavaProcess = new javax.swing.JMenuItem();
        MenuOthersSeparator4 = new javax.swing.JPopupMenu.Separator();
        MenuItemEndAllProcess = new javax.swing.JMenuItem();
        MenuOthersSeparator5 = new javax.swing.JPopupMenu.Separator();
        MenuItemUninstallTool = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenu();
        howtouseit = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuItemChangelog = new javax.swing.JMenuItem();
        MenuHelpSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuItemLisence = new javax.swing.JMenuItem();
        MenuHelpSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuCodeOthers = new javax.swing.JMenu();
        MenuItemPage = new javax.swing.JMenuItem();
        MenuItemReleases = new javax.swing.JMenuItem();
        MenuItemGit = new javax.swing.JMenuItem();
        MenuItemBugs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MotoTool para Moto Z3 Play - BETA - Es - 1.0.0.0-RC1");
        setBackground(java.awt.Color.darkGray);
        setForeground(java.awt.Color.darkGray);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        UnlockBootloaderBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        UnlockBootloaderBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/unlocked.png"))); // NOI18N
        UnlockBootloaderBTN.setText("Desbloquear Bootloader");
        UnlockBootloaderBTN.setToolTipText("Desbloquea bootloader del télefono, esto eliminara todos sus datos");
        UnlockBootloaderBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UnlockBootloaderBTN.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        UnlockBootloaderBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnlockBootloaderBTNActionPerformed(evt);
            }
        });

        LockBootloaderBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        LockBootloaderBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/locked.png"))); // NOI18N
        LockBootloaderBTN.setText("Bloquear Bootloader");
        LockBootloaderBTN.setToolTipText("Bloquea bootloader del télefono, esto eliminara todos sus datos");
        LockBootloaderBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LockBootloaderBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LockBootloaderBTNActionPerformed(evt);
            }
        });

        FlashTWRPOfficialBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        FlashTWRPOfficialBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/flash.png"))); // NOI18N
        FlashTWRPOfficialBTN.setText("Flashear TWRP Oficial");
        FlashTWRPOfficialBTN.setToolTipText("");
        FlashTWRPOfficialBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FlashTWRPOfficialBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlashTWRPOfficialBTNActionPerformed(evt);
            }
        });

        FlashTWRPOxygenOSBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        FlashTWRPOxygenOSBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/flash.png"))); // NOI18N
        FlashTWRPOxygenOSBTN.setText("Flashear Recovery Stock");
        FlashTWRPOxygenOSBTN.setToolTipText("");
        FlashTWRPOxygenOSBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FlashTWRPOxygenOSBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlashTWRPOxygenOSBTNActionPerformed(evt);
            }
        });

        BootloaderLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        BootloaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BootloaderLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/bootl.png"))); // NOI18N
        BootloaderLabel.setText("Bootloader");

        RecoveryLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RecoveryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RecoveryLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/recov.png"))); // NOI18N
        RecoveryLabel.setText("Recovery");

        RebootBootloaderBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RebootBootloaderBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/rebooto.png"))); // NOI18N
        RebootBootloaderBTN.setText("Reiniciar Bootloader");
        RebootBootloaderBTN.setToolTipText("");
        RebootBootloaderBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RebootBootloaderBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RebootBootloaderBTNActionPerformed(evt);
            }
        });

        RebootRecoveryBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RebootRecoveryBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/rebooto.png"))); // NOI18N
        RebootRecoveryBTN.setText("Reiniciar Recovery");
        RebootRecoveryBTN.setToolTipText("");
        RebootRecoveryBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RebootRecoveryBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RebootRecoveryBTNActionPerformed(evt);
            }
        });

        DebugConsole.setEditable(false);
        DebugConsole.setForeground(new java.awt.Color(204, 51, 0));
        DebugConsole.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DebugConsole.setCaretColor(new java.awt.Color(255, 0, 0));
        DebugConsole.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DebugConsole.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N

        RebootLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        RebootLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RebootLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/reboot.png"))); // NOI18N
        RebootLabel.setText("Reinicio");

        ConsoleLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        ConsoleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ConsoleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/depurar.png"))); // NOI18N
        ConsoleLabel.setText("Consola depuradora");

        CheckADBDevicesBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        CheckADBDevicesBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/ok16.png"))); // NOI18N
        CheckADBDevicesBTN.setText("Verificar adb devices");
        CheckADBDevicesBTN.setToolTipText("");
        CheckADBDevicesBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CheckADBDevicesBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckADBDevicesBTNActionPerformed(evt);
            }
        });

        CheckFastbootDevicesBTN.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        CheckFastbootDevicesBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/ok16.png"))); // NOI18N
        CheckFastbootDevicesBTN.setText("Verificar fastboot devices");
        CheckFastbootDevicesBTN.setToolTipText("");
        CheckFastbootDevicesBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CheckFastbootDevicesBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckFastbootDevicesBTNActionPerformed(evt);
            }
        });

        OPLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OPLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/logo.png"))); // NOI18N
        OPLogo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        CheckLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        CheckLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CheckLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/check.png"))); // NOI18N
        CheckLabel.setText("Verificar");

        TaskBar.setToolTipText("Barra de tareas");
        TaskBar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/open.png"))); // NOI18N
        MenuFiles.setText("Archivos");
        MenuFiles.setToolTipText("");
        MenuFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuFiles.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N

        MenuItemOpenADB.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemOpenADB.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemOpenADB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/open16.png"))); // NOI18N
        MenuItemOpenADB.setText("Abrir carpeta adb");
        MenuItemOpenADB.setToolTipText("Se abrirá la carpeta que contiene los archivos adb&fastboot");
        MenuItemOpenADB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemOpenADB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenADBActionPerformed(evt);
            }
        });
        MenuFiles.add(MenuItemOpenADB);
        MenuFiles.add(MenuFilesSeparator1);

        MenuIMGFolders.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/open16.png"))); // NOI18N
        MenuIMGFolders.setText("Carpeta img");
        MenuIMGFolders.setToolTipText("Vacía o abre la carpeta img");
        MenuIMGFolders.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuIMGFolders.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemOpenIMGFolder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemOpenIMGFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/open16.png"))); // NOI18N
        MenuItemOpenIMGFolder.setText("Abrir carpeta img");
        MenuItemOpenIMGFolder.setToolTipText("Abre la ubicación img dónde se encuentran los archivos del usuario");
        MenuItemOpenIMGFolder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemOpenIMGFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenIMGFolderActionPerformed(evt);
            }
        });
        MenuIMGFolders.add(MenuItemOpenIMGFolder);

        MenuItemEmptyIMGFolder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemEmptyIMGFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/asterix.gif"))); // NOI18N
        MenuItemEmptyIMGFolder.setText("Vaciar carpeta img");
        MenuItemEmptyIMGFolder.setToolTipText("Elimina todos los archivos acumulados en la carpeta img");
        MenuItemEmptyIMGFolder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemEmptyIMGFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEmptyIMGFolderActionPerformed(evt);
            }
        });
        MenuIMGFolders.add(MenuItemEmptyIMGFolder);

        MenuFiles.add(MenuIMGFolders);
        MenuFiles.add(MenuFilesSeparator2);

        MenuSubDirs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/open16.png"))); // NOI18N
        MenuSubDirs.setText("Abrir subcarpetas");
        MenuSubDirs.setToolTipText("Abre las carpetas dentro de img");
        MenuSubDirs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuSubDirs.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemTWRP.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemTWRP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/rebooto.png"))); // NOI18N
        MenuItemTWRP.setText("TWRP");
        MenuItemTWRP.setToolTipText("Esta carpeta contiene la imagen del recovery twrp oficial");
        MenuItemTWRP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemTWRP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemTWRPActionPerformed(evt);
            }
        });
        MenuSubDirs.add(MenuItemTWRP);

        MenuItemFirmware.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemFirmware.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/depurar.png"))); // NOI18N
        MenuItemFirmware.setText("Firmware");
        MenuItemFirmware.setToolTipText("Esta carpeta contiene OxygenOS 9.0.8");
        MenuItemFirmware.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemFirmware.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFirmwareActionPerformed(evt);
            }
        });
        MenuSubDirs.add(MenuItemFirmware);

        MenuItemRecovery.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemRecovery.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/recov.png"))); // NOI18N
        MenuItemRecovery.setText("Recovery");
        MenuItemRecovery.setToolTipText("Esta carpeta contiene el Recovery TWRP pero para flashear el firmware OxygenOS");
        MenuItemRecovery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemRecovery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRecoveryActionPerformed(evt);
            }
        });
        MenuSubDirs.add(MenuItemRecovery);

        MenuFiles.add(MenuSubDirs);

        TaskBar.add(MenuFiles);

        MenuFlash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/flashb.png"))); // NOI18N
        MenuFlash.setText("Descargas");
        MenuFlash.setToolTipText("");
        MenuFlash.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuFlash.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        MenuItemFlashFirmware.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemFlashFirmware.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/edit_add16.png"))); // NOI18N
        MenuItemFlashFirmware.setText("Flashear Firmware Stock");
        MenuItemFlashFirmware.setToolTipText("");
        MenuItemFlashFirmware.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemFlashFirmware.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFlashFirmwareActionPerformed(evt);
            }
        });
        MenuFlash.add(MenuItemFlashFirmware);

        MenuItemFlashFirmwareSeparator.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuFlash.add(MenuItemFlashFirmwareSeparator);

        MenuItemDownloadFirmware.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemDownloadFirmware.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/download.png"))); // NOI18N
        MenuItemDownloadFirmware.setText("Descargar último firmware pie");
        MenuItemDownloadFirmware.setToolTipText("");
        MenuItemDownloadFirmware.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemDownloadFirmware.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDownloadFirmwareActionPerformed(evt);
            }
        });
        MenuFlash.add(MenuItemDownloadFirmware);

        TaskBar.add(MenuFlash);

        MenuOthers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/build.png"))); // NOI18N
        MenuOthers.setText("Otros");
        MenuOthers.setToolTipText("");
        MenuOthers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuOthers.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        MenuItemRebootTool.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemRebootTool.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemRebootTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/button_ok.png"))); // NOI18N
        MenuItemRebootTool.setText("Reiniciar Tool");
        MenuItemRebootTool.setToolTipText("Se reiniciará el Tool de manera pasiva");
        MenuItemRebootTool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemRebootTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRebootToolActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemRebootTool);
        MenuOthers.add(MenuOthersSeparator1);

        MenuLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/len.png"))); // NOI18N
        MenuLang.setText("Idioma");
        MenuLang.setToolTipText("Puede cambiar el idioma");
        MenuLang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuLang.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemEnglish.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemEnglish.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemEnglish.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/english.png"))); // NOI18N
        MenuItemEnglish.setText("English");
        MenuItemEnglish.setToolTipText("");
        MenuItemEnglish.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemEnglish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEnglishActionPerformed(evt);
            }
        });
        MenuLang.add(MenuItemEnglish);

        MenuOthers.add(MenuLang);
        MenuOthers.add(MenuOthersSeparator2);

        MenuTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/tool.png"))); // NOI18N
        MenuTool.setText("Otros Tool");
        MenuTool.setToolTipText("Tools extras para diferentes dispositivos");
        MenuTool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuTool.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemOP5Tool.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemOP5Tool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/favicon.png"))); // NOI18N
        MenuItemOP5Tool.setText("OnePlus Tool");
        MenuItemOP5Tool.setToolTipText("");
        MenuItemOP5Tool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemOP5Tool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOP5ToolActionPerformed(evt);
            }
        });
        MenuTool.add(MenuItemOP5Tool);

        MenuItemXiaomi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemXiaomi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/mi.png"))); // NOI18N
        MenuItemXiaomi.setText("Xiaomi MI A2/6X Tool");
        MenuItemXiaomi.setToolTipText("");
        MenuItemXiaomi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemXiaomi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemXiaomiActionPerformed(evt);
            }
        });
        MenuTool.add(MenuItemXiaomi);

        MenuOthers.add(MenuTool);
        MenuOthers.add(MenuOthersSeparator3);

        MenuItemEndJavaProcess.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemEndJavaProcess.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemEndJavaProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/java.png"))); // NOI18N
        MenuItemEndJavaProcess.setText("Terminar proceso Java");
        MenuItemEndJavaProcess.setToolTipText("Se cerrará por completo Java y del Tool");
        MenuItemEndJavaProcess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemEndJavaProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEndJavaProcessActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemEndJavaProcess);
        MenuOthers.add(MenuOthersSeparator4);

        MenuItemEndAllProcess.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemEndAllProcess.setForeground(new java.awt.Color(204, 102, 0));
        MenuItemEndAllProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/cancel16.png"))); // NOI18N
        MenuItemEndAllProcess.setText("Terminar todos los procesos ");
        MenuItemEndAllProcess.setToolTipText("Cerrará por completo el programa y sus subprogramas abiertos");
        MenuItemEndAllProcess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemEndAllProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEndAllProcessActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemEndAllProcess);
        MenuOthers.add(MenuOthersSeparator5);

        MenuItemUninstallTool.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        MenuItemUninstallTool.setForeground(new java.awt.Color(255, 51, 0));
        MenuItemUninstallTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/warn.png"))); // NOI18N
        MenuItemUninstallTool.setText("Eliminar Tool por completo");
        MenuItemUninstallTool.setToolTipText("Eliminar tool y sus archivos y carpetas");
        MenuItemUninstallTool.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemUninstallTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemUninstallToolActionPerformed(evt);
            }
        });
        MenuOthers.add(MenuItemUninstallTool);

        TaskBar.add(MenuOthers);

        MenuHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/info.png"))); // NOI18N
        MenuHelp.setText("Ayuda");
        MenuHelp.setToolTipText("");
        MenuHelp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuHelp.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N

        howtouseit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        howtouseit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/help.png"))); // NOI18N
        howtouseit.setText("Cómo usar el Tool?");
        howtouseit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        howtouseit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                howtouseitActionPerformed(evt);
            }
        });
        MenuHelp.add(howtouseit);
        MenuHelp.add(jSeparator3);

        MenuItemChangelog.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemChangelog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/new16.png"))); // NOI18N
        MenuItemChangelog.setText("Changelog");
        MenuItemChangelog.setToolTipText("Registros de cambios");
        MenuItemChangelog.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemChangelog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemChangelogActionPerformed(evt);
            }
        });
        MenuHelp.add(MenuItemChangelog);
        MenuHelp.add(MenuHelpSeparator2);

        MenuItemLisence.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemLisence.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/new16.png"))); // NOI18N
        MenuItemLisence.setText("Licencia");
        MenuItemLisence.setToolTipText("");
        MenuItemLisence.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemLisence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemLisenceActionPerformed(evt);
            }
        });
        MenuHelp.add(MenuItemLisence);
        MenuHelp.add(MenuHelpSeparator3);

        MenuCodeOthers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/code.png"))); // NOI18N
        MenuCodeOthers.setText("Código/Otros");
        MenuCodeOthers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuCodeOthers.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        MenuItemPage.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/telegram.png"))); // NOI18N
        MenuItemPage.setText("Contacto");
        MenuItemPage.setToolTipText("Telegram: Enviame un mensaje si tienes dudas o necesitas reportar algún detalle!");
        MenuItemPage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPageActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemPage);

        MenuItemReleases.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemReleases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/update.png"))); // NOI18N
        MenuItemReleases.setText("Releases");
        MenuItemReleases.setToolTipText("Descargas del Tool");
        MenuItemReleases.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemReleases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemReleasesActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemReleases);

        MenuItemGit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemGit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/git.png"))); // NOI18N
        MenuItemGit.setText("GitHub");
        MenuItemGit.setToolTipText("Código del programa java");
        MenuItemGit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemGit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGitActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemGit);

        MenuItemBugs.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MenuItemBugs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mototool/images/bug.png"))); // NOI18N
        MenuItemBugs.setText("Bugs");
        MenuItemBugs.setToolTipText("Errores que se registran en el programa");
        MenuItemBugs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MenuItemBugs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemBugsActionPerformed(evt);
            }
        });
        MenuCodeOthers.add(MenuItemBugs);

        MenuHelp.add(MenuCodeOthers);

        TaskBar.add(MenuHelp);

        setJMenuBar(TaskBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LockBootloaderBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UnlockBootloaderBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BootloaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FlashTWRPOfficialBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RecoveryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FlashTWRPOxygenOSBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(RebootRecoveryBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RebootBootloaderBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RebootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CheckADBDevicesBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(CheckFastbootDevicesBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CheckLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(ConsoleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DebugConsole, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addComponent(OPLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(OPLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BootloaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RebootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RebootBootloaderBTN)
                    .addComponent(UnlockBootloaderBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LockBootloaderBTN)
                    .addComponent(RebootRecoveryBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConsoleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DebugConsole, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RecoveryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(CheckLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FlashTWRPOfficialBTN)
                    .addComponent(CheckADBDevicesBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FlashTWRPOxygenOSBTN)
                    .addComponent(CheckFastbootDevicesBTN))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("Tool para Moto Z3 Play");
        getAccessibleContext().setAccessibleParent(this);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            System.out.println("Configurando " +OS+ " look and feel...");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            System.out.println("Listo! :) ");
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            System.out.println("No se pudo configurar el LookAndFeel");
        } 
        
    this.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
           
    DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");

                
    File adb = new File("C:\\adb"); 
    if (!adb.exists() == true){
  try{
  String strDirectoy ="C:\\adb";
  String strManyDirectories="C:\\adb";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");     
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }
  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
        
    File se = new File("C:\\MotoTool\\.settings"); 
    if (!se.exists() == true){
  try{
  String strDirectoy ="C:\\MotoTool\\.settings";
  String strManyDirectories="C:\\MotoTool\\.settings";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
    }
    
        Socket sock= new Socket();
        InetSocketAddress addr=new InetSocketAddress("www.google.com",80);
        try {
        sock.connect(addr,3000);
        
        File adbb2 = new File("C:\\adb\\adb.exe"); 
        
        if (!adbb2.exists() == true){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo encontrar los archivos adb & fastboot \n\n El archivo se instalará en C:\\adb","Error",JOptionPane.ERROR_MESSAGE);
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Iniciando...");
        JFrame frame = new JFrame("Descargando adb & fastboot...");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setAlwaysOnTop(true);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://bitbucket.org/Franco28/flashtool-motorola-moto-g5-g5plus/downloads/adb.zip");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\adb\\adb.zip");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000d);
                            // update progress bar
                            jProgressBar.setString("Calculando tamaño del archivo...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Descargando adb & fastboot... " +currentProgress+ " Bytes");
                                jProgressBar.setString("Descargando adb & fastboot: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                    DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
                    frame.setVisible(false);
 
        File adb2 = new File("C:\\adb\\adb.zip"); 
        String zipFilePath = "C:\\adb\\adb.zip";
        String destDirectory = "C:\\adb";
        UnzipUtility unzipper = new UnzipUtility();
        try {
            unzipper.unzip(zipFilePath, destDirectory);
        } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"No se pudo descomprimir el archivo " +adb2,"Error",JOptionPane.ERROR_MESSAGE);
        }
            adb2.delete();
            this.dispose();//To close the current window
            new MotoVisual().setVisible(true);
    }
            }catch (FileNotFoundException e) {
            if (runnable != null) runnable.run();
            jProgressBar.setString("Descargando adb & fastboot: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                if (runnable != null) runnable.run();
                Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start(); 
 }
                      
        File driverop = new File("C:\\Program Files\\Motorola Mobility LLC\\Motorola Mobile Drivers Installation 6.4.0");
        
        if (!driverop.exists() == true){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo encontrar el driver de Motorola \n\n Por favor baje el archivo de la página que se abrirá","Error",JOptionPane.ERROR_MESSAGE);
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://support.motorola.com/us/en/solution/MS88481?utm_source=affiliate&CID=all:affiliate:e9q74i:6149808:VigLink&cjevent=0fc459efd88e11e981a806770a24060d"));
} catch (IOException | URISyntaxException e2) {
} 
 }else{
        System.out.println("Driver it´s - OK!");
}
            
        
        File bin = new File("C:\\MotoTool\\.settings\\lib\\MotoTool.jar"); 
        if (!bin.exists() == true){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudieron encontrar los binarios \n\n El archivo se instalará en C:\\MotoTool\\.settings","Error",JOptionPane.ERROR_MESSAGE);
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Iniciando...");
        JFrame frame = new JFrame("Descargando binarios...");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setAlwaysOnTop(true);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://bitbucket.org/Franco28/flashtool-motorola-moto-g5-g5plus/downloads/binmoto.zip");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\MotoTool\\.settings\\binmoto.zip");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {                       
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000);
                            // update progress bar
                            jProgressBar.setString("Calculando tamaño del archivo...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Descargando binarios... " +currentProgress+ " Bytes");
                                jProgressBar.setString("Descargando binarios: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                    DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
                    frame.setVisible(false);
        
        File lib = new File("C:\\MotoTool\\.settings\\binmoto.zip"); 
        String zipFilePath = "C:\\MotoTool\\.settings\\binmoto.zip";
        String destDirectory = "C:\\MotoTool\\.settings";
        UnzipUtility unzipper = new UnzipUtility();
        try {
            unzipper.unzip(zipFilePath, destDirectory);
        } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"No se pudo descomprimir el archivo " +lib,"Error",JOptionPane.ERROR_MESSAGE);
        }
            lib.delete();
              this.dispose();//To close the current window
              new MotoVisual().setVisible(true);
 
    }
            }catch (FileNotFoundException e) {
            if (runnable != null) runnable.run();
            jProgressBar.setString("Descargando binarios: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                if (runnable != null) runnable.run();
                Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start(); 
 }
        
        }catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        DebugConsole.setText("Error no se pudo establecer conexión con el servidor.");            
        JOptionPane.showMessageDialog(null,"Verifique su conexión a internet y vuelva a intentarlo...","Error",JOptionPane.ERROR_MESSAGE);
        dispose();//To close the current window         
        }finally{
            try { 
            sock.close(); 
        }catch (IOException e) { 
            }
        }   
            
        File binf = new File("C:\\MotoTool\\.settings\\bin"); 
        if (!binf.exists() == true){
// Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\MotoTool\\.settings";
  String strManyDirectories="C:\\MotoTool\\.settings\\bin";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
        
File f = new File("C:\\MotoTool\\img"); 
if (!f.exists() == true){
// Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\MotoTool";
  String strManyDirectories="C:\\MotoTool\\img\\firmware";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
        
        File MotoTool = new File("MotoTool"); 
        if (!MotoTool.exists() == true){
// Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\MotoTool";
  String strManyDirectories="C:\\MotoTool\\img";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
                
    File r = new File("C:\\MotoTool\\img\\recovery"); 
    if (!r.exists() == true){
 // Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\MotoTool\\img";
  String strManyDirectories="C:\\MotoTool\\img\\recovery";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");    
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }
  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}

        File tr = new File("C:\\MotoTool\\img\\twrp"); 
        if (!tr.exists() == true){    
 // Create a directory; all non-existent ancestor directories are
// automatically created
 try{
  String strDirectoy ="C:\\MotoTool\\img";
  String strManyDirectories="C:\\MotoTool\\img\\twrp";

  // Create one directory
  boolean success = (
  new File(strDirectoy)).mkdir();
  if (success) {
  DebugConsole.setText("Directorio: " + strManyDirectories + " creado...");   
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }  
  // Create multiple directories
  success = (new File(strManyDirectories)).mkdirs();
  if (success) {
  DebugConsole.setText("Directorios: " + strManyDirectories + " creado...");  
  DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
  }

  }catch (IllegalArgumentException e){//Catch exception if any
  DebugConsole.setText("Error: " + e.getMessage());     
  }
}
    }//GEN-LAST:event_formWindowOpened

    private void UnlockBootloaderBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnlockBootloaderBTNActionPerformed
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    int reply = JOptionPane.showConfirmDialog(null, "Este proceso eliminará toda su memoria interna, realizar backup antes de continuar", "Cuidado! Desea continuar?", JOptionPane.YES_NO_OPTION);
    if (reply == JOptionPane.YES_OPTION) {   
    JOptionPane.showMessageDialog(null,"Por favor activa las opciones de desarrollador y activa: \n\n - Desbloqueo OEM \n\n - Depuración por USB \n\n Visita la página de Moto para obtener el código");
  
    Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://motorola-global-portal.custhelp.com/app/standalone/bootloader/unlock-your-device-a"));
    d.browse(new URI("https://forum.xda-developers.com/g5-plus/how-to/how-to-unlock-bootloader-moto-g5-plus-t3573879"));
} catch (IOException | URISyntaxException e2) {
}                   
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start cmd.exe");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}          
        }else {
              if (runnable != null) runnable.run();
              JOptionPane.showMessageDialog(null, "Proceso cancelado");
              dispose();//To close the current window
              new MotoVisual().setVisible(true);  
        }
    }//GEN-LAST:event_UnlockBootloaderBTNActionPerformed

    private void FlashTWRPOfficialBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlashTWRPOfficialBTNActionPerformed
        Socket sock= new Socket();
        InetSocketAddress addr=new InetSocketAddress("www.google.com",80);
        try {
        sock.connect(addr,3000);       
        
        File f = new File("C:\\MotoTool\\img\\twrp\\twrp-3.3.1-1-beckham.img"); 
        
        if(!f.exists()){
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo encontrar TWRP Para Flashear ROM","Error",JOptionPane.ERROR_MESSAGE);
        final JProgressBar jProgressBar = new JProgressBar();
        jProgressBar.setMaximum(100000);
        jProgressBar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProgressBar.setBorderPainted(false);
        jProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar.setStringPainted(true);
        jProgressBar.setString("Iniciando...");
        JFrame frame = new JFrame("Descargando TWRP Oficial Beckham...");
        frame.setContentPane(jProgressBar);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setSize(600, 100);
        frame.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        frame.setVisible(true);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        Runnable updatethread;
            updatethread = () -> {
            try {
                URL url = new URL("https://bitbucket.org/Franco28/flashtool-motorola-moto-g5-g5plus/downloads/twrp-3.3.1-1-beckham.img");
                HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                long completeFileSize = httpConnection.getContentLength();
                try (final java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream())) {
                    java.io.FileOutputStream fos = new java.io.FileOutputStream("C:\\MotoTool\\img\\twrp\\twrp-3.3.1-1-beckham.img");
                    try (final java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)) {
                        byte[] data = new byte[1024];
                        long downloadedFileSize = 0;
                        int x1 = 0;
                        while ((x1 = in.read(data, 0, 1024)) >= 0) {
                            downloadedFileSize += x1;
                            // calculate progress
                            final int currentProgress = (int) ((((double)downloadedFileSize) / ((double)completeFileSize)) * 100000d);
                            // update progress bar
                            jProgressBar.setString("Calculando tamaño del archivo...");
                            SwingUtilities.invokeLater(() -> {
                                DebugConsole.setText("Descargando TWRP Oficial Beckham..." +currentProgress+ " Bytes");
                                jProgressBar.setString("Descargando TWRP Oficial Beckham: \n" +currentProgress+ " Bytes");
                                jProgressBar.setValue(currentProgress);
                            });
                            bout.write(data, 0, x1);
                        }
                    }
                    DebugConsole.setText("Bienvenido a MotoTool para Moto Z3 Play");
                    frame.setVisible(false);
                }
            }catch (FileNotFoundException e) {
            if (runnable != null) runnable.run();
            jProgressBar.setString("Descargando TWRP Oficial Beckham: ERROR");
            DebugConsole.setText("ERROR: " +e);
            }catch (IOException ex) {
                Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        new Thread(updatethread).start();
 }
           
        }catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        DebugConsole.setText("Error no se pudo establecer conexión con el servidor.");            
        JOptionPane.showMessageDialog(null,"Verifique su conexión a internet y vuelva a intentarlo...","Error",JOptionPane.ERROR_MESSAGE);
        dispose();//To close the current window 
       
        }finally{
            try { 
            sock.close(); 
        }catch (IOException e) { 
            }
        } 
        
    File f = new File("C:\\MotoTool\\img\\twrp\\twrp-3.3.1-1-beckham.img");
   
    if(f.exists() == true){
    final File file = new File("C:\\MotoTool\\.settings\\bin\\twrp.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title FLASH OP5 TWRP");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Flashear TWRP twrp-3.3.1-1-beckham para Moto Z3 Play...");
            writer.println("echo.");
            writer.println("echo Pulse cualquier tecla para continuar...");
            writer.println("pause>nul");
            writer.println("cd C:\\MotoTool\\img\\twrp");
            writer.println("echo.");
            writer.println("fastboot flash recovery twrp-3.3.1-1-beckham.img");
            writer.println("echo.");
            writer.println("echo Presiona cualquier tecla para salir...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\twrp.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}
  }
    }//GEN-LAST:event_FlashTWRPOfficialBTNActionPerformed

    private void RebootBootloaderBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RebootBootloaderBTNActionPerformed
    final File file = new File("C:\\MotoTool\\.settings\\bin\\rebootb.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Reiniciar Bootloader");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Reiniciar Bootloader...");
            writer.println("echo.");
            writer.println("echo Pulse cualquier tecla para continuar...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("adb reboot bootloader");
            writer.println("echo.");
            writer.println("echo Presiona cualquier tecla para salir...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\rebootb.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }     
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
} 
    }//GEN-LAST:event_RebootBootloaderBTNActionPerformed

    private void CheckADBDevicesBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckADBDevicesBTNActionPerformed
    final File file = new File("C:\\MotoTool\\.settings\\bin\\checkadb.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Verificar adb devices");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Verificar adb devices...");
            writer.println("echo.");
            writer.println("echo Pulse cualquier tecla para continuar...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("adb devices");
            writer.println("echo.");
            writer.println("echo Presiona cualquier tecla para salir...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\checkadb.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
    }//GEN-LAST:event_CheckADBDevicesBTNActionPerformed

    private void RebootRecoveryBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RebootRecoveryBTNActionPerformed
    final File file = new File("C:\\MotoTool\\.settings\\bin\\rebootr.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Reiniciar Recovery");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Reiniciar Recovery...");
            writer.println("echo.");
            writer.println("echo Pulse cualquier tecla para continuar...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("adb reboot recovery");
            writer.println("echo.");
            writer.println("echo Presiona cualquier tecla para salir...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
          final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
          if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\rebootr.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
    }//GEN-LAST:event_RebootRecoveryBTNActionPerformed

    private void CheckFastbootDevicesBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckFastbootDevicesBTNActionPerformed
final File file = new File("C:\\MotoTool\\.settings\\bin\\checkf.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Verificar fastboot devices");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Verificar fastboot devices...");
            writer.println("echo.");
            writer.println("echo Pulse cualquier tecla para continuar...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("fastboot devices");
            writer.println("echo.");
            writer.println("echo Presiona cualquier tecla para salir...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\checkf.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
              this.dispose();//To close the current window
              new MotoVisual().setVisible(true);
    }//GEN-LAST:event_CheckFastbootDevicesBTNActionPerformed

    private void FlashTWRPOxygenOSBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlashTWRPOxygenOSBTNActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Opción no disponible...");
    }//GEN-LAST:event_FlashTWRPOxygenOSBTNActionPerformed

    private void LockBootloaderBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LockBootloaderBTNActionPerformed
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    int reply = JOptionPane.showConfirmDialog(null, "Este proceso eliminará toda su memoria interna, realizar backup antes de continuar", "Cuidado! Desea continuar?", JOptionPane.YES_NO_OPTION);
    if (reply == JOptionPane.YES_OPTION) {  
    final File file = new File("C:\\MotoTool\\.settings\\bin\\lock.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Bloquear Bootloader");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo Bloquear Bootloader...");
            writer.println("echo.");
            writer.println("echo Pulse cualquier tecla para continuar...");
            writer.println("pause>nul");
            writer.println("echo.");
            writer.println("fastboot oem lock");
            writer.println("echo.");
            writer.println("echo Presiona cualquier tecla para salir...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\lock.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}             
        }else {
              if (runnable != null) runnable.run();
              JOptionPane.showMessageDialog(null, "Proceso cancelado");
              dispose();//To close the current window
              new MotoVisual().setVisible(true);  
        } 
    }//GEN-LAST:event_LockBootloaderBTNActionPerformed

    private void MenuItemChangelogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemChangelogActionPerformed
        final File file = new File("C:\\MotoTool\\.settings\\bin\\changeloges.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("title Registros de cambios");
            writer.println("color C");
            writer.println("echo.");
            writer.println("echo #############");   
            writer.println("echo # CHANGELOG #");            
            writer.println("echo #############");       
            writer.println("echo. ");   
            writer.println("echo ***************");            
            writer.println("echo * 1.0.0.0-RC1 *");  
            writer.println("echo ***************");   
            writer.println("echo - Primera compilacion");            
            writer.println("echo - Soporte para Moto Z3 Play (beckham)");  
            writer.println("echo.");            
            writer.println("echo Presiona cualquier tecla para salir...");
            writer.println("echo.");
            writer.println("pause>nul");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        } 
           Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\changeloges.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }     
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
} 
    }//GEN-LAST:event_MenuItemChangelogActionPerformed

    private void MenuItemOpenADBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenADBActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\adb");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Carpeta " +dirToOpen+ "no encontrada","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemOpenADBActionPerformed

    private void MenuItemRebootToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRebootToolActionPerformed
              this.dispose();//To close the current window
              new MotoVisual().setVisible(true);
    }//GEN-LAST:event_MenuItemRebootToolActionPerformed

    private void MenuItemEndJavaProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEndJavaProcessActionPerformed
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM javaw.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Error no se pudo cerrar" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM Tool.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Error no se pudo cerrar" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    System.exit(0);
    }//GEN-LAST:event_MenuItemEndJavaProcessActionPerformed

    private void MenuItemEnglishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEnglishActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Opción no disponible...");     
    }//GEN-LAST:event_MenuItemEnglishActionPerformed

    private void MenuItemFlashFirmwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFlashFirmwareActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Opción no disponible...");     
    }//GEN-LAST:event_MenuItemFlashFirmwareActionPerformed

    private void MenuItemDownloadFirmwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDownloadFirmwareActionPerformed
    Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://mirrors.lolinet.com/firmware/moto/beckham/official/"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemDownloadFirmwareActionPerformed

    private void MenuItemRecoveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRecoveryActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\MotoTool\\img\\recovery");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Carpeta " +dirToOpen+ " no encontrada","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemRecoveryActionPerformed

    private void MenuItemTWRPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemTWRPActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\MotoTool\\img\\twrp");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Carpeta " +dirToOpen+ " no encontrada","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemTWRPActionPerformed

    private void MenuItemFirmwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFirmwareActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\MotoTool\\img\\firmware");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Carpeta " +dirToOpen+ " no encontrada","Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemFirmwareActionPerformed

    private void MenuItemXiaomiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemXiaomiActionPerformed
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "Opción no disponible...");     
    }//GEN-LAST:event_MenuItemXiaomiActionPerformed

    private void MenuItemEndAllProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEndAllProcessActionPerformed
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM javaw.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "No se pudo cerrar" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM Tool.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "No se pudo cerrar" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM adb.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "No se pudo cerrar" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
        try {
    Process process = Runtime.getRuntime().exec("TASKKILL /F /IM fastboot.exe");
    } catch (IOException e) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null, "No se pudo cerrar" +e,"Error",JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_MenuItemEndAllProcessActionPerformed

    private void MenuItemBugsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemBugsActionPerformed
try {
    Runtime.getRuntime().exec(new String[] { "c:\\Windows\\notepad.exe", "C:\\MotoTool\\.settings\\others\\bugs.txt" });
} catch (IOException e) {
} 
    }//GEN-LAST:event_MenuItemBugsActionPerformed

    private void MenuItemLisenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemLisenceActionPerformed
try {
    Runtime.getRuntime().exec(new String[] { "c:\\Windows\\notepad.exe", "C:\\MotoTool\\.settings\\LICENSE.txt" });
} catch (IOException e) {
} 
    }//GEN-LAST:event_MenuItemLisenceActionPerformed

    private void MenuItemPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPageActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://t.me/francom28"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemPageActionPerformed

    private void MenuItemGitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGitActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://github.com/Franco28/FlashTool-OP/tree/MotoTool"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemGitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        final File file = new File("C:\\MotoTool\\.settings\\bin\\kill.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("color C");
            writer.println("TASKKILL /F /IM Tool.exe");
            writer.println("TASKKILL /F /IM javaw.exe");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("TASKKILL /F /IM javaw.exe");
            writer.println("TASKKILL /F /IM Tool.exe");
            writer.println("TASKKILL /F /IM adb.exe");
            writer.println("TASKKILL /F /IM fastboot.exe");
            writer.println("if exist C:\\MotoTool\\.settings\\bin\\changeloges.bat (");
            writer.println("del C:\\MotoTool\\.settings\\bin\\changeloges.bat");
            writer.println(") else (");
            writer.println("rem file doesn't exist\n");
            writer.println(")");
            writer.println("if exist C:\\MotoTool\\.settings\\bin\\changelogen.bat (");
            writer.println("del C:\\MotoTool\\.settings\\bin\\changelogen.bat");
            writer.println(") else (");
            writer.println("rem file doesn't exist\n");
            writer.println(")");
            writer.println("");
            writer.println("del \"%~f0\" & exit");

        }catch (IOException e) {
         final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
         if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start C:\\MotoTool\\.settings\\bin\\kill.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}   
    }//GEN-LAST:event_formWindowClosing

    private void MenuItemUninstallToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemUninstallToolActionPerformed
    final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
    if (runnable != null) runnable.run();
        int reply = JOptionPane.showConfirmDialog(null, "Se Eliminarán todas las carpetas y el mismo Tool!", "Cuidado! Desea continuar?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {               
                try {
                Path directory = Paths.get("C:\\MotoTool");
                Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {
                        Files.delete(file); // this will work because it's always a File
                        return FileVisitResult.CONTINUE;
                    }
                    
                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                        Files.delete(dir); //this will work because Files in the directory are already deleted
                        return FileVisitResult.CONTINUE;
                    }
                });
            } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null, "No se pudo eliminar " +ex,"Error",JOptionPane.ERROR_MESSAGE);
            }

        final File file = new File("uninstall.bat");
        try {
            file.createNewFile();
        } catch (IOException ex) {
        if (runnable != null) runnable.run();
        JOptionPane.showMessageDialog(null,"No se pudo crear el archivo","Error",JOptionPane.ERROR_MESSAGE);
        }
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.println("@echo off");
            writer.println("titel Eliminando Tool...");
            writer.println("color C");
            writer.println("TASKKILL /IM Tool.exe /F");
            writer.println("TASKKILL /IM javaw.exe /F");
            writer.println("For /F \"tokens=*\" %%I in ('Dir C:\\Users\\%USERNAME%\\Desktop\\Tool.exe /s /b') do set FOUND=\"%%~fI\"");
            writer.println("del %FOUND%");
            writer.println("del \"%~f0\" & exit");
        }catch (IOException e) {
        if (runnable != null) runnable.run();
         JOptionPane.showMessageDialog(null,"" +e ,"Error",JOptionPane.ERROR_MESSAGE);
        }
                
   Runtime runtime = Runtime.getRuntime();
try {
    Process p1 = runtime.exec("cmd /c start uninstall.bat");
    InputStream is = p1.getInputStream();
    int i = 0;
    while( (i = is.read() ) != -1) {
       if (runnable != null) runnable.run();
       JOptionPane.showMessageDialog(null, +i,"Error",JOptionPane.ERROR_MESSAGE);
    }
} catch(IOException ioException) {
    if (runnable != null) runnable.run();
    JOptionPane.showMessageDialog(null, ioException.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
}
        }else{
              this.dispose();//To close the current window
              new MotoVisual().setVisible(true);
        }        
    }//GEN-LAST:event_MenuItemUninstallToolActionPerformed

    private void MenuItemOpenIMGFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenIMGFolderActionPerformed
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File("C:\\MotoTool\\img");
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null,"Carpeta " +dirToOpen+ " no encontrada " +iae,"Error",JOptionPane.ERROR_MESSAGE);
              this.dispose();//To close the current window
              new MotoVisual().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(MotoVisual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuItemOpenIMGFolderActionPerformed

    private void MenuItemEmptyIMGFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEmptyIMGFolderActionPerformed
        	File files = new File("C:\\MotoTool\\img");
		long size = 0;
		size = getFileFolderSize(files);
		double sizeMB = (double) size / 1024 / 1024;
		String s = " MB";
		if (sizeMB < 1) {
			sizeMB = (double) size / 1024;
			s = " KB";
		}
                DebugConsole.setText("Tamaño de la carpeta " +files.getName()+ " : " +sizeMB +s);
        final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
        if (runnable != null) runnable.run();
        int reply = JOptionPane.showConfirmDialog(null, "Se eliminarán todos los contenidos de la carpeta img!", "Cuidado! Desea continuar?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {            
            try {
                Path directory = Paths.get("C:\\MotoTool\\img");
                Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {
                        Files.delete(file); // this will work because it's always a File
                        return FileVisitResult.CONTINUE;
                    }
                    
                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                        Files.delete(dir); //this will work because Files in the directory are already deleted
                        return FileVisitResult.CONTINUE;
                    }
                });
              this.dispose();//To close the current window
              new MotoVisual().setVisible(true);
              
            } catch (IOException ex) {
            if (runnable != null) runnable.run();
            JOptionPane.showMessageDialog(null, "No se pudo eliminar " +ex,"Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        if (reply == JOptionPane.NO_OPTION) {            
              this.dispose();//To close the current window
              new MotoVisual().setVisible(true);
        }    
    }//GEN-LAST:event_MenuItemEmptyIMGFolderActionPerformed

    private void MenuItemOP5ToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOP5ToolActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://github.com/Franco28/FlashTool-OP"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemOP5ToolActionPerformed

    private void MenuItemReleasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemReleasesActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://github.com/Franco28/FlashTool-OP/releases"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_MenuItemReleasesActionPerformed
    
    private void howtouseitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_howtouseitActionPerformed
Desktop d = Desktop.getDesktop();
try {
    d.browse(new URI("https://github.com/Franco28/FlashTool-OP/tree/MotoTool#flashtool-op"));
} catch (IOException | URISyntaxException e2) {
} 
    }//GEN-LAST:event_howtouseitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MotoVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MotoVisual().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BootloaderLabel;
    private javax.swing.JButton CheckADBDevicesBTN;
    private javax.swing.JButton CheckFastbootDevicesBTN;
    private javax.swing.JLabel CheckLabel;
    private javax.swing.JLabel ConsoleLabel;
    private javax.swing.JFormattedTextField DebugConsole;
    private javax.swing.JButton FlashTWRPOfficialBTN;
    private javax.swing.JButton FlashTWRPOxygenOSBTN;
    private javax.swing.JButton LockBootloaderBTN;
    private javax.swing.JMenu MenuCodeOthers;
    private javax.swing.JMenu MenuFiles;
    private javax.swing.JPopupMenu.Separator MenuFilesSeparator1;
    private javax.swing.JPopupMenu.Separator MenuFilesSeparator2;
    private javax.swing.JMenu MenuFlash;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JPopupMenu.Separator MenuHelpSeparator2;
    private javax.swing.JPopupMenu.Separator MenuHelpSeparator3;
    private javax.swing.JMenu MenuIMGFolders;
    private javax.swing.JMenuItem MenuItemBugs;
    private javax.swing.JMenuItem MenuItemChangelog;
    private javax.swing.JMenuItem MenuItemDownloadFirmware;
    private javax.swing.JMenuItem MenuItemEmptyIMGFolder;
    private javax.swing.JMenuItem MenuItemEndAllProcess;
    private javax.swing.JMenuItem MenuItemEndJavaProcess;
    private javax.swing.JMenuItem MenuItemEnglish;
    private javax.swing.JMenuItem MenuItemFirmware;
    private javax.swing.JMenuItem MenuItemFlashFirmware;
    private javax.swing.JPopupMenu.Separator MenuItemFlashFirmwareSeparator;
    private javax.swing.JMenuItem MenuItemGit;
    private javax.swing.JMenuItem MenuItemLisence;
    private javax.swing.JMenuItem MenuItemOP5Tool;
    private javax.swing.JMenuItem MenuItemOpenADB;
    private javax.swing.JMenuItem MenuItemOpenIMGFolder;
    private javax.swing.JMenuItem MenuItemPage;
    private javax.swing.JMenuItem MenuItemRebootTool;
    private javax.swing.JMenuItem MenuItemRecovery;
    private javax.swing.JMenuItem MenuItemReleases;
    private javax.swing.JMenuItem MenuItemTWRP;
    private javax.swing.JMenuItem MenuItemUninstallTool;
    private javax.swing.JMenuItem MenuItemXiaomi;
    private javax.swing.JMenu MenuLang;
    private javax.swing.JMenu MenuOthers;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator1;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator2;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator3;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator4;
    private javax.swing.JPopupMenu.Separator MenuOthersSeparator5;
    private javax.swing.JMenu MenuSubDirs;
    private javax.swing.JMenu MenuTool;
    private javax.swing.JLabel OPLogo;
    private javax.swing.JButton RebootBootloaderBTN;
    private javax.swing.JLabel RebootLabel;
    private javax.swing.JButton RebootRecoveryBTN;
    private javax.swing.JLabel RecoveryLabel;
    private javax.swing.JMenuBar TaskBar;
    private javax.swing.JButton UnlockBootloaderBTN;
    private javax.swing.JMenuItem howtouseit;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables

}
